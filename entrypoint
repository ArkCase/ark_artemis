#!/bin/bash
set -euo pipefail

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

err()
{
	say "❌ ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

xml_escape()
{
	local V="${1}"
	V="${V//&/&amp;}"
	V="${V//</&lt;}"
	V="${V//>/&gt;}"
	V="${V//\"/&quot;}"
	V="${V//\'/&apos;}"
	echo -n "${V}"
}

hash_password()
{
	local PASSWORD="${1}"
	local HASH="$(artemis mask --hash "${PASSWORD}" | awk '{ print $2 }' | tr -d '\n')"
	echo -n "ENC(${HASH})"
}

csv_to_list()
{
	tr ',' '\n' | sed -e '/^\s*$/d' | sort
}

add_user()
{
	local USERNAME="${1}"
	local PASSWORD="${2}"
	local FILE="${3}"
	echo "${USERNAME} = $(hash_password "${PASSWORD}")" >> "${FILE}"
}

add_roles()
{
	local USERNAME="${1}"
	local ROLES="${2}"
	local FILE="${3}"

	local R=()
	local MEM=()
	readarray -t R < <(csv_to_list <<< "${ROLES}")
	for ROLE in "${R[@]}" ; do
		# get the list of members
		readarray -t MEM < <(csv_to_list < <(grep -E "^\s*${ROLE}\s*=" "${FILE}" | sed -e 's;^.*=;;g'))

		# add the user
		MEM+=("${USERNAME}")

		# sort alphabetically and uniquely
		MEM="$(echo -n "${MEM[@]}" | tr ' ' '\n' | sort -u | sed -e '/^\s*$/d' | tr '\n' ',' | sed -e 's;,$;;g')"

		# replace the existing roles line from the file
		sed -i -e "/^\s*${ROLE}\s*=/d" "${FILE}"

		echo "${ROLE} = ${MEM}" >> "${FILE}"
	done
}

url_escape()
{
	local V="${1}"
	echo -n "${V}" | /usr/bin/jq -sRr @uri
}

sed_escape()
{
	local V="${1}"
	echo -n "${V}" | /usr/bin/sed -e 's;&;\\&;g'
}

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v CONF_DIR ] || CONF_DIR="${BASE_DIR}/conf"
[ -v DATA_DIR ] || DATA_DIR="${BASE_DIR}/data"
[ -v LOGS_DIR ] || LOGS_DIR="${BASE_DIR}/logs"

# Fork into the application
[ -v JAVA_MEM_ARGS ] || JAVA_ARGS="-XX:MinRAMPercentage=50.0 -XX:MaxRAMPercentage=80.0"
export JAVA_MEM_ARGS

# Update the SSL stuff
[ -v SSL_DIR ] || SSL_DIR="/.ssl"

# This is done because we can't risk having "weird" characters in the password
# b/c we can't find docs on how to escape said weird characters so they won't
# trip up netty's URL parsing. Using this model ensures our password will only
# contain alphanumeric characters (letters in both cases, and numbers)
acme-init

MAX_BOOT_DELAY="60"
if [ -v BOOT_DELAY ] && [[ "${BOOT_DELAY}" =~ ^[0-9]+$ ]] ; then
	BOOT_DELAY="$(( 10#${BOOT_DELAY} ))"
	if [ ${BOOT_DELAY} -gt 0 ] ; then
		[ ${BOOT_DELAY} -gt ${MAX_BOOT_DELAY} ] && BOOT_DELAY=${MAX_BOOT_DELAY}
		say "Applying a boot delay of ${BOOT_DELAY} seconds"
		START="$(date +%s)"
		while true ; do
			DIFF="$(( $(date +%s) - START ))"
			[ ${DIFF} -ge ${BOOT_DELAY} ] && break
			sleep 1 || fail "Boot delay aborted - exiting"
		done
	fi
fi

[ -e "${CONF_DIR}" ] || fail "The data directory [${CONF_DIR}] does not exist"
[ -d "${CONF_DIR}" ] || fail "The path [${CONF_DIR}] is not a directory"
[ -r "${CONF_DIR}" ] || fail "The data directory [${CONF_DIR}] is not readable by ${USER} (${UID}:$(id -g))"
[ -w "${CONF_DIR}" ] || fail "The data directory [${CONF_DIR}] is not writable by ${USER} (${UID}:$(id -g))"
[ -x "${CONF_DIR}" ] || fail "The data directory [${CONF_DIR}] is not executable by ${USER} (${UID}:$(id -g))"

[ -e "${DATA_DIR}" ] || fail "The data directory [${DATA_DIR}] does not exist"
[ -d "${DATA_DIR}" ] || fail "The path [${DATA_DIR}] is not a directory"
[ -r "${DATA_DIR}" ] || fail "The data directory [${DATA_DIR}] is not readable by ${USER} (${UID}:$(id -g))"
[ -w "${DATA_DIR}" ] || fail "The data directory [${DATA_DIR}] is not writable by ${USER} (${UID}:$(id -g))"
[ -x "${DATA_DIR}" ] || fail "The data directory [${DATA_DIR}] is not executable by ${USER} (${UID}:$(id -g))"

[ -e "${LOGS_DIR}" ] || fail "The data directory [${LOGS_DIR}] does not exist"
[ -d "${LOGS_DIR}" ] || fail "The path [${LOGS_DIR}] is not a directory"
[ -r "${LOGS_DIR}" ] || fail "The data directory [${LOGS_DIR}] is not readable by ${USER} (${UID}:$(id -g))"
[ -w "${LOGS_DIR}" ] || fail "The data directory [${LOGS_DIR}] is not writable by ${USER} (${UID}:$(id -g))"
[ -x "${LOGS_DIR}" ] || fail "The data directory [${LOGS_DIR}] is not executable by ${USER} (${UID}:$(id -g))"

export POD_HOSTNAME="$(hostname)"

if [ ! -v NODE_ID ] ; then
	say "No NODE_ID envvar was given, will attempt to guess it"
	if [ ! -v POD_NAME ] ; then
		say "No POD_NAME variable was found, will use the first component of the hostname instead"
		POD_NAME="${POD_HOSTNAME%%.*}"
	fi
	[[ "${POD_NAME}" =~ ^.*-([0-9]+)$ ]] || fail "The pod name [${POD_NAME}] doesn't match the pattern for a stateful pod (must end with a number)"
	NODE_ID="${BASH_REMATCH[1]}"
fi
[[ "${NODE_ID}" =~ ^[0-9]+$ ]] || fail "The NODE_ID value [${NODE_ID}] is not a valid number"

# Remove leading zeros
export NODE_ID="$(( 10#${NODE_ID} ))"

# We need to XML-escape this value b/c it will get substituted into text values
KEYSTORE="${SSL_DIR}/keystore.pkcs12"
KEYSTORE_PASSWORD="$(<"${SSL_DIR}/keystore.pass")" || fail "Failed to read the SSL keystore password"

# No need to XML-escape this value, as xmlstarlet will do it for us (also, don't allow empty values)
[ -v ARTEMIS_CLUSTER_PASSWORD ] || ARTEMIS_CLUSTER_PASSWORD=""
[ -n "${ARTEMIS_CLUSTER_PASSWORD}" ] || ARTEMIS_CLUSTER_PASSWORD="PBWaPfidc5Ko8kiof4338RvxZsWwwPOFtDMYF62IXDd5aWGJotw6QH2ARIozKPWE"

# Set the SSL protection for the UI console
cat "${CONF_DIR}/bootstrap.xml.template" | \
	/usr/bin/xmlstarlet ed -P \
		-N "root=http://activemq.apache.org/schema" \
		--update "/root:broker/root:web[@path = 'web']/root:binding/@keyStorePath" -v "${KEYSTORE}" \
		--update "/root:broker/root:web[@path = 'web']/root:binding/@keyStorePassword" -v "${KEYSTORE_PASSWORD}" \
	> "${CONF_DIR}/bootstrap.xml"

# Substitute the hostname where appropriate
/usr/bin/cat "${CONF_DIR}/broker.xml.template" | \
	/usr/bin/xmlstarlet ed -P \
		-N "root=urn:activemq" \
		-N "core=urn:activemq:core" \
		--update "/root:configuration/core:core/core:name" -v "${POD_HOSTNAME}" \
		--update "/root:configuration/core:core/core:cluster-password" -v "${ARTEMIS_CLUSTER_PASSWORD}" \
		--delete "/root:configuration/core:core/core:connectors/core:connector[@name = 'node-${NODE_ID}']" \
		--delete "/root:configuration/core:core/core:cluster-connections/core:cluster-connection/core:static-connectors/core:connector-ref[text() = 'node-${NODE_ID}']" | \
	# For these replacements, the values must first be URL-escaped, then XML-escaped, and finally
	# the & symbol must be escaped so sed doesn't replace it with the matching pattern
	/usr/bin/sed \
		-e "s'\${POD_HOSTNAME}'$(sed_escape "$(xml_escape "$(url_escape "${POD_HOSTNAME}")")")'g" \
		-e "s'\${KEYSTORE}'$(sed_escape "$(xml_escape "$(url_escape "${KEYSTORE}")")")'g" \
		-e "s'\${KEYSTORE_PASSWORD}'$(sed_escape "$(xml_escape "$(url_escape "${KEYSTORE_PASSWORD}")")")'g" \
	> "${CONF_DIR}/broker.xml"

#
# Enable the new, environment-based authentication scheme
#
if [ "${ARTEMIS_NEW_USER_MODEL:-false}" == "true" ] ; then

	[ -v ARTEMIS_ADMIN_USERNAME ] || ARTEMIS_ADMIN_USERNAME=""
	[ -n "${ARTEMIS_ADMIN_USERNAME}" ] || ARTEMIS_ADMIN_USERNAME="admin"

	[ -v ARTEMIS_ADMIN_PASSWORD ] || ARTEMIS_ADMIN_PASSWORD=""
	[ -n "${ARTEMIS_ADMIN_PASSWORD}" ] || fail "Cannot have an empty administrator password"

	[ -v ARTEMIS_ADMIN_ROLE ] || ARTEMIS_ADMIN_ROLE=""
	[ -n "${ARTEMIS_ADMIN_ROLE}" ] || ARTEMIS_ADMIN_ROLE="administrator"

	#
	# Render the user/roles files ...
	#
	USERS_FILE="${CONF_DIR}/artemis-users.properties"
	ROLES_FILE="${CONF_DIR}/artemis-roles.properties"

	:> "${USERS_FILE}" || fail "Failed to truncate the users file at [${USERS_FILE}]"
	:> "${ROLES_FILE}" || fail "Failed to truncate the roles file at [${ROLES_FILE}]"

	#
	# First, the administrator
	#
	add_user  "${ARTEMIS_ADMIN_USERNAME}" "${ARTEMIS_ADMIN_PASSWORD}" "${USERS_FILE}"
	add_roles "${ARTEMIS_ADMIN_USERNAME}" "${ARTEMIS_ADMIN_ROLE}" "${ROLES_FILE}"

	# The guest
	add_user "guest" "guest" "${USERS_FILE}"

	# Now add the dynamic users
	for CRED in "${!ARTEMIS_CRED_USERNAME_@}" ; do
		[[ "${CRED}" =~ ^ARTEMIS_CRED_USERNAME_([0-9]+)$ ]] || continue
		NUM="${BASH_REMATCH[1]}"

		# If there's no password for the user, we skip it
		PASS="ARTEMIS_CRED_PASSWORD_${NUM}"
		[ -v "${PASS}" ] || continue
		add_user "${!CRED}" "${!PASS}" "${USERS_FILE}"

		# If there are no roles for the user, we skip'em
		ROLES="ARTEMIS_CRED_ROLES_${NUM}"
		[ -v "${ROLES}" ] || continue
		add_roles "${!CRED}" "${!ROLES}" "${ROLES_FILE}"
	done

	ok "Users generated"
	cat "${USERS_FILE}"
	ok "Roles generated"
	cat "${ROLES_FILE}"
	ok "Authentication configured"
fi

[ -v JAVA_TOOL_OPTIONS ] || JAVA_TOOL_OPTIONS=""

# Require SSL for Zookeeper
JAVA_TOOL_OPTIONS+=" -Dzookeeper.client.secure=true"

CMD="${HOME_DIR}/bin/broker"
[ ${#} -lt 1 ] && set -- "run"
say "Launching: "${CMD@Q}" "${@@Q}""
exec "${CMD}" "${@}"
