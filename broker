#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

set -euo pipefail
. /.functions

#
# Define base variables, according to all other containers/charts
#
set_or_default BASE_DIR "/app"
set_or_default HOME_DIR "${BASE_DIR}/artemis"
set_or_default CONF_DIR "${BASE_DIR}/conf"
set_or_default DATA_DIR "${BASE_DIR}/data"
set_or_default LOGS_DIR "${BASE_DIR}/logs"

#
# Define Artemis variables based on base variables
#
set_or_default ARTEMIS_HOME "${HOME_DIR}"
set_or_default ARTEMIS_INSTANCE "${CONF_DIR}"
set_or_default ARTEMIS_INSTANCE_ETC "${ARTEMIS_INSTANCE}"
set_or_default ARTEMIS_DATA_DIR "${DATA_DIR}"
set_or_default ARTEMIS_LOGS "${LOGS_DIR}"
set_or_default ARTEMIS_OOME_DUMP "${ARTEMIS_LOGS}/oom_dump.hprof"

set_or_default ARTEMIS_CLUSTER_PROPS
# Cluster Properties: Used to pass arguments to ActiveMQ Artemis which can be referenced in broker.xml
#ARTEMIS_CLUSTER_PROPS="-Dactivemq.remoting.default.port=61617 -Dactivemq.remoting.amqp.port=5673 -Dactivemq.remoting.stomp.port=61614 -Dactivemq.remoting.hornetq.port=5446"

set_or_default DEBUG_ARGS
to_array DEBUG_ARGS

# Hawtio Properties
# HAWTIO_ROLE define the user role or roles required to be able to login to the console. Multiple roles to allow can
# be separated by a comma. Set to '*' or an empty value to disable role checking when Hawtio authenticates a user.
set_or_default HAWTIO_ROLE "administrator"

# Java Memory Options
set_or_default JAVA_MEM_ARGS "-Xms512M -Xmx2G"

# Convert to an array, respecting quotes
to_array JAVA_MEM_ARGS

# Java Options
if [ ! -v JAVA_ARGS ] ; then
	JAVA_ARGS=(
		-XX:AutoBoxCacheMax=20000
		-XX:+PrintClassHistogram
		-XX:+UseG1GC
		-XX:+UseStringDeduplication
		-Dhawtio.disableProxy="true"
		-Dhawtio.realm="activemq"
		-Dhawtio.offline="true"
		-Dhawtio.rolePrincipalClasses="org.apache.activemq.artemis.spi.core.security.jaas.RolePrincipal"
		-Dhawtio.http.strictTransportSecurity="max-age=31536000;includeSubDomains;preload"
		-Djolokia.policyLocation="file://${ARTEMIS_INSTANCE}/jolokia-access.xml"
	)
fi

# Convert to an array, respecting quotes
to_array JAVA_ARGS

# Extra JVM args
to_array JAVA_ARGS_APPEND

# Uncomment to enable logging for Safepoint JVM pauses
#
# In addition to the traditional GC logs you could enable some JVM flags to know any meaningful and "hidden" pause
# that could affect the latencies of the services delivered by the broker, including those that are not reported by
# the classic GC logs and dependent by JVM background work (eg method deoptimizations, lock unbiasing, JNI, counted
# loops and obviously GC activity).
#
as_boolean "${ARTEMIS_GC_LOG:-}" && JAVA_ARGS+=( -verbose:gc -Xlog:gc+heap=trace -Xlog:gc* -Xlog:age*=debug -Xlog:safepoint -Xlog:gc:"${ARTEMIS_LOGS}/artemis-gc.log:uptimemillis:filecount=9,filesize=20M" )

# Uncomment to enable the dumping of the Java heap when a java.lang.OutOfMemoryError exception is thrown
as_boolean "${ARTEMIS_GC_DUMP:-}" && JAVA_ARGS+=( "${JAVA_ARGS[@]}" -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath="${ARTEMIS_OOME_DUMP}" )

# Only enable debug options for the 'run' command
if [ ${#} -ge 1 ] && [ "${1}" == "run" ] ; then
    # Uncomment to enable remote debugging
	as_boolean "${ARTEMIS_DEBUG:-}" && JAVA_ARGS+=(-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005)

    # Uncomment for async profiler
    as_boolean "${ARTEMIS_PROFILER:-}" && JAVA_ARGS+=(-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints)
fi

CLASSPATH="${ARTEMIS_HOME}/lib/artemis-boot.jar"

if [ -f "${ARTEMIS_OOME_DUMP}" ] ; then
	# backup the last OOME heap dump
	mv "${ARTEMIS_OOME_DUMP}" "${ARTEMIS_OOME_DUMP}.bkp.$(date -Isec -u)"
fi

ARCH="$(uname -m)"

# Add the extra JVM args
JAVA_ARGS+=( "${JAVA_MEM_ARGS[@]}" "${JAVA_ARGS_APPEND[@]}")

CMD=(
	java
		"${JAVA_ARGS[@]}"
		-Dhawtio.role="${HAWTIO_ROLE}"
		-Djava.security.auth.login.config="${ARTEMIS_INSTANCE_ETC}/login.config"
		${ARTEMIS_CLUSTER_PROPS}
		-classpath "${CLASSPATH}"
		-Dartemis.home="${ARTEMIS_HOME}"
		-Dartemis.instance="${ARTEMIS_INSTANCE}"
		-Dartemis.logs="${ARTEMIS_LOGS}"
		-Djava.library.path="${ARTEMIS_HOME}/bin/lib/linux-${ARCH}"
		-Djava.io.tmpdir="${ARTEMIS_DATA}/tmp"
		-Ddata.dir="${ARTEMIS_DATA_DIR}"
		-Dartemis.instance.etc="${ARTEMIS_INSTANCE_ETC}"
		"${DEBUG_ARGS[@]}"
		org.apache.activemq.artemis.boot.Artemis "${@}"
)

execute "${CMD[@]}"
